/*! jPlayerPlaylist for jPlayer 2.9.2 ~ (c) 2009-2014 Happyworm Ltd ~ MIT License */ 

(function(a, b) { //a = JQuery, 이 함수는 시작할때 작동한채로 시작함
    
		jPlayerPlaylist = function(b, c, d) {
//==========================================================
// b:		jPlayer: "#jquery_jplayer_1",
//      cssSelectorAncestor: "#jp_container_1"
// c: 이거 음악 플레이 리스트임 (객체)
//==========================================================
        var e = this;
//        var allListEliments = $("div.que_close");//내가 지정한 변수
        console.log("e의 값은 무엇인가요"),
        console.log(e),
        this.current = 0,
        this.loop = !1, 
        this.shuffled = !1, 
        this.removing = !1, //false일때만 작동
        this.cssSelector = a.extend({}, this._cssSelector, b), 
        this.options = a.extend(!0, { 
        //====================================================================================
        // JQuery.extend(!0, {keyBindings,stateClass},this._option, d)
        // JQuery.extend는 줄줄이 부른 함수를 전부 합체시킴 같은 값이 있으면 뒤에 있는 걸 덮어씌움
        // 즉 이건 옵션에 세팅할 값들임
        //====================================================================================
            keyBindings: {
                next: {
                    key: 221,
                    fn: function() {
                        e.next()
                    }
                },
                previous: {
                    key: 219,
                    fn: function() {
                        e.previous()
                    }
                },
                shuffle: {
                    key: 83,
                    fn: function() {
                        e.shuffle()
                    }
                }
            },
            stateClass: {
                shuffled: "jp-state-shuffled"
            }
        	}, 
        	this._options,  //프로토타입 옵션
        	d				//내옵션
        ), 
        this.playlist = [], 
        this.original = [], 
        this._initPlaylist(c), //내가 넣어준 플레이리스트 객체를 매개변수로 실행
        this.cssSelector.details = this.cssSelector.cssSelectorAncestor + " .jp-details", 
        this.cssSelector.playlist = this.cssSelector.cssSelectorAncestor + " .jp-playlist", 
        this.cssSelector.next = this.cssSelector.cssSelectorAncestor + " .jp-next", 
        this.cssSelector.previous = this.cssSelector.cssSelectorAncestor + " .jp-previous", 
        this.cssSelector.shuffle = this.cssSelector.cssSelectorAncestor + " .jp-shuffle", 
        this.cssSelector.shuffleOff = this.cssSelector.cssSelectorAncestor + " .jp-shuffle-off",
         
//====================================내가 선언한 선택자======================================================
		
		this.cssSelector.goRemove = this.cssSelector.cssSelectorAncestor + " .que_close", 
		//재생목록의 x버튼

		
//===================================================================================================        

        this.options.cssSelectorAncestor = this.cssSelector.cssSelectorAncestor, 
        this.options.repeat = function(a) {
            e.loop = a.jPlayer.options.loop
        }, 
        a(this.cssSelector.jPlayer).bind(a.jPlayer.event.ready, function() {
            e._init() //준비되면  _init 동작함. 밑에 있음.
        }), 
        a(this.cssSelector.jPlayer).bind(a.jPlayer.event.ended, function() {
            e.next() //끝나면 next 동작함 --> 다음 노래로 넘어가고 마지막 노래면 loop 여부에 따라 처음으로 되돌리거나 안하거나 함
        }), 
        a(this.cssSelector.jPlayer).bind(a.jPlayer.event.play, function() {
            a(this).jPlayer("pauseOthers") //play하면 작동. 다른 모든 인스턴스를 중지 시킨다.
        }), 
        a(this.cssSelector.jPlayer).bind(a.jPlayer.event.resize, function(b) {
            b.jPlayer.options.fullScreen ? a(e.cssSelector.details).show() : a(e.cssSelector.details).hide()
        }),
         
        a(this.cssSelector.previous).click(function(a) {
            a.preventDefault(), 
            e.previous(), //이전 클릭하면 이전 노래로
            e.blur(this)
        }), 
        a(this.cssSelector.next).click(function(a) {
            a.preventDefault(), 
            e.next(), //이후 클릭하면 이후 노래로
            e.blur(this)
        }), 
        a(this.cssSelector.shuffle).click(function(b) {
            b.preventDefault(), 
            e.shuffle(e.shuffled && a(e.cssSelector.jPlayer).jPlayer("option", "useStateClassSkin") ? !1 : !0), 
            e.blur(this) //리스트 섞기 클릭하면 섞음
        }), 
        
//===========================내가 선언한 메서드================================================ 

		a(document).on("click",this.cssSelector.goRemove , function(a){
			e.remove(3); //리무브의 숫자는 그 숫자 빼고 전부 삭제해버림
		}),
		
//============================================================================================ 
        
        a(this.cssSelector.shuffleOff).click(function(a) {
            a.preventDefault(), 
            e.shuffle(!1), //한번 더 클릭하면 원래대로 되돌림
            e.blur(this)
        }).hide(), 
        
        this.options.fullScreen || a(this.cssSelector.details).hide(), 
        a(this.cssSelector.playlist + " ul").empty(), 
        this._createItemHandlers(), 
        a(this.cssSelector.jPlayer).jPlayer(this.options)
    }, 
    
//================================================================================================================
//===================================jPlayerPlaylist function 끝 ==================================================
//================================================================================================================   

		//FUNCTION.prototype은 FUNCTION을 상속받은 객체가 사용할 수 있는 메서드를 정의한다. 
    jPlayerPlaylist.prototype = { 
        _cssSelector: {
            jPlayer: "#jquery_jplayer_1",
            cssSelectorAncestor: "#jp_container_1"
        },
        _options: {
            playlistOptions: {
                autoPlay: !1,
                loopOnPrevious: !1,
                shuffleOnLoop: !0,
                enableRemoveControls: 1,
                displayTime: "slow",
                addTime: "fast",
                removeTime: "fast",
                shuffleTime: "slow",
                itemClass: "jp-playlist-item",
                freeGroupClass: "jp-free-media",
                freeItemClass: "jp-playlist-item-free",
                removeItemClass: "jp-playlist-item-remove"
            }
        },
        option: function(a, c) {
            if (c === b) return this.options.playlistOptions[a];
            switch (this.options.playlistOptions[a] = c, a) {
                case "enableRemoveControls":
                    this._updateControls();
                    break;
                case "itemClass":
                case "freeGroupClass":
                case "freeItemClass":
                case "removeItemClass":
                    this._refresh(!0), this._createItemHandlers()
            }
            return this
        },
        _init: function() {
            var a = this;
            this._refresh(function() {
                a.options.playlistOptions.autoPlay ? a.play(a.current) : a.select(a.current) 
                //오토플레이가 true면 play(0), 아니면 select(0) 를 매개변수로 _refresh 실행
            })
        },
        _initPlaylist: function(b) { //여기의 b는 내가 넣어준 플레이리스트임
            this.current = 0, 
			this.shuffled = !1, //셔플 false
			this.removing = !1, 
			this.original = a.extend(!0, [], b), //original에 나의 플레이 리스트 넣음
			this._originalPlaylist()
        },
        _originalPlaylist: function() {
            var b = this;
			 //var b 찍어보기 --> 내가 선언한 jPlayerPlaylist 그 자체
            this.playlist = [], 
			a.each(this.original, function(a) {
                b.playlist[a] = b.original[a]
            }) //original을 복제해서 playlist를 만듭니다.
        },
        _refresh: function(b) {
            var c = this;
            if (b && !a.isFunction(b)) 
            	a(this.cssSelector.playlist + " ul").empty(), 
            	a.each(this.playlist, function(b) {
                	a(c.cssSelector.playlist + " ul").append(c._createListItem(c.playlist[b]))
            	}), 
            this._updateControls();
            else {
                var d = a(this.cssSelector.playlist + " ul").children().length ? this.options.playlistOptions.displayTime : 0;
                a(this.cssSelector.playlist + " ul").slideUp(d, function() {
                    var d = a(this);
                    a(this).empty(), a.each(c.playlist, function(a) {
                        d.append(c._createListItem(c.playlist[a]))
                    }), c._updateControls(), a.isFunction(b) && b(), c.playlist.length ? a(this).slideDown(c.options.playlistOptions.displayTime) : a(this).show()
                })
            }
        },
        _createListItem: function(b) {
            var c = this,
                d = "<li><div>";
            if (d += "<a href='javascript:;' class='" + this.options.playlistOptions.removeItemClass + "'>&times;</a>", b.free) {
                var e = !0;
                d += "<span class='" + this.options.playlistOptions.freeGroupClass + "'>(", a.each(b, function(b, f) {
                    a.jPlayer.prototype.format[b] && (e ? e = !1 : d += " | ", d += "<a class='" + c.options.playlistOptions.freeItemClass + "' href='" + f + "' tabindex='-1'>" + b + "</a>")
                }), d += ")</span>"
            }
             return d += "<a href='javascript:;' class='" + this.options.playlistOptions.itemClass + "' tabindex='0'><span class='que_img'><img src='"+b.image+"'></span ><div class='que_data'>" + b.title + (b.artist ? " <span class='jp-artist'>by " + b.artist + "</span>" : "") + "</div></a>", d += "<div class='action'><span class='que_more'><img src='../images/svg/more.svg'></span><span class='que_close'><img src='../images/svg/close.svg'></span></div></div>"+b.option+"</li>"
        },
        _createItemHandlers: function() {
            var b = this;
            a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.itemClass).on("click", "a." + this.options.playlistOptions.itemClass, function(c) {
                c.preventDefault();
                var d = a(this).parent().parent().index();
                b.current !== d ? b.play(d) : a(b.cssSelector.jPlayer).jPlayer("play"), b.blur(this)
            }), a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.freeItemClass).on("click", "a." + this.options.playlistOptions.freeItemClass, function(c) {
                c.preventDefault(), a(this).parent().parent().find("." + b.options.playlistOptions.itemClass).click(), b.blur(this)
            }), a(this.cssSelector.playlist).off("click", "a." + this.options.playlistOptions.removeItemClass).on("click", "a." + this.options.playlistOptions.removeItemClass, function(c) {
                c.preventDefault();
                var d = a(this).parent().parent().index();
                b.remove(d), b.blur(this)
            })
        },
        _updateControls: function() {
            this.options.playlistOptions.enableRemoveControls ? 
            	a(this.cssSelector.playlist + " ." + this.options.playlistOptions.removeItemClass).show() : 
            	a(this.cssSelector.playlist + " ." + this.options.playlistOptions.removeItemClass).hide(), 
            this.shuffled ? 
            	a(this.cssSelector.jPlayer).jPlayer("addStateClass", "shuffled") : 
            	a(this.cssSelector.jPlayer).jPlayer("removeStateClass", "shuffled"), 
            a(this.cssSelector.shuffle).length && a(this.cssSelector.shuffleOff).length && (this.shuffled ?
            	(a(this.cssSelector.shuffleOff).show(), a(this.cssSelector.shuffle).hide()) : 
            	(a(this.cssSelector.shuffleOff).hide(), a(this.cssSelector.shuffle).show()))
        },
        _highlight: function(c) {
            this.playlist.length && c !== b && (a(this.cssSelector.playlist + " .jp-playlist-current").removeClass("jp-playlist-current"), 
            a(this.cssSelector.playlist + " li:nth-child(" + (c + 1) + ")").addClass("jp-playlist-current").find(".jp-playlist-item").addClass("jp-playlist-current"))
            //매개변수 c를 받으면, jp-playlist-current 클래스를 제거하고 플레이 리스트의 c번째 음악에  jp-playlist-current를 부여함 
        },
        setPlaylist: function(a) {
            this._initPlaylist(a), this._init()
        },
        add: function(b, c) {
            a(this.cssSelector.playlist + " ul").append(this._createListItem(b)).find("li:last-child").hide().slideDown(this.options.playlistOptions.addTime), this._updateControls(), this.original.push(b), this.playlist.push(b), c ? this.play(this.playlist.length - 1) : 1 === this.original.length && this.select(0)
        },
        remove: function(c) {
            var d = this; //jPlayerPlaylist
            console.log("remove의 d 는 무엇인가요."),
	        console.log(d);
            return c === b ? (this._initPlaylist([]), 
            	this._refresh(function() {
                	a(d.cssSelector.jPlayer).jPlayer("clearMedia")
            	}),  
            !0) 	//c === b 라면 재생목록을 전부 부셔놓는다 ; 즉 c가 undefine일때 
            : this.removing ? !1 : //this.removing이 true면 false로 만든다
             	(c = 0 > c ? d.original.length + c : c, //c가 0보다 작다면 c= 오리지날 길이에 +c한 값이 된다. false라면 c가 된다  
            	c >= 0 && c < this.playlist.length && (this.removing = !0, //removing을 true로 전환한다
            		a(this.cssSelector.playlist + " li:nth-child(" + (c + 1) + ")").slideUp(this.options.playlistOptions.removeTime, //빠르게 사라짐 
            			function() { //slideUp이 처리된후 시작되는 함수
            				//
            				console.log("이게뭔가요");
            				console.log(a(this));
            				//
                			if (a(this).remove(), d.shuffled) { //d.shuffled가 true라면
                    			var b = d.playlist[c]; //var b에 플레이리스트의 c번째 값을 세팅한다
                    			a.each(d.original, function(a) {
                       				return d.original[a] === b ? (d.original.splice(a, 1), !1) : void 0
                   				}), //d.original를 하나씩 뽑아서 b와 맞는지 체크한다.
                   					//b와 일치하면 거기부터 인덱스 하나 자른다(삭제한다) 아니면 0 리턴(삭제하지 않는다)
                   				d.playlist.splice(c, 1)
                   					//d.playlist의 c번 인덱스를 쪼갠다
                			} else  { //d.shuffled가 true가 아니라면
                			d.original.splice(c, 1), 
                			d.playlist.splice(c, 1);
                			}//걍 거기 있는거 삭제함
                			console.log("어케 잘렸나 보자");
                			console.log(d.original);
                			console.log(d.playlist);
                			d.original.length ? //d.original이 남아있니?
                				c === d.current ? // 남아있고 삭제한게 지금 듣고 있는 노래였다면
                					(d.current = c < d.original.length ? // 지금 듣는 노래는 c가 < d.original의 길이라면 
                						d.current : //걍 다음노래 들으셈
                						d.original.length - 1, //아니면 마지막 노래 들으셈 
                						d.select(d.current)) //그 다음 d.current를 select하겠습니다 (setMedia)
                				: c < d.current && d.current-- 
                				 //c가 d.current보다 작다면 d.current -1, 아니면 암것도 안해도됨
                			: (a(d.cssSelector.jPlayer).jPlayer("clearMedia"), //안남아 있으면 clearMedia 날림
                			d.current = 0, 
                			d.shuffled = !1, 
                			d._updateControls()), 
			           		d.removing = !1 //removing을 다시 false로 전환한다
			           	}//slideUp function 끝 
			        )//slideUp 끝
				), //this.removing==true
            !0)//c=
        },
        select: function(b) {
            b = 0 > b ? this.original.length + b : b, 
            
            b >= 0 && b < this.playlist.length ? (this.current = b, this._highlight(b), 
            a(this.cssSelector.jPlayer).jPlayer("setMedia", this.playlist[this.current])) : this.current = 0 
            //--> 매개변수가 0이니 이거 실행함. 여기서 a는 JQuery임
            //setMedia(노래 작동, 환경설정) --> id가 jquery_jplayer_1 밑에 있는 작동할 노래에 playlist 0번째 객체를 넣음
        },
        play: function(c) {
            c = 0 > c ? this.original.length + c : c,
            c >= 0 && c < this.playlist.length ? this.playlist.length && (this.select(c), 
            a(this.cssSelector.jPlayer).jPlayer("play")) : c === b && a(this.cssSelector.jPlayer).jPlayer("play")
        },
        pause: function() {
            a(this.cssSelector.jPlayer).jPlayer("pause")
        },
        next: function() {
            var a = this.current + 1 < this.playlist.length ? this.current + 1 : 0;
            this.loop ? 0 === a && this.shuffled && this.options.playlistOptions.shuffleOnLoop && this.playlist.length > 1 ? this.shuffle(!0, !0) : this.play(a) : a > 0 && this.play(a)
        },
        previous: function() {
            var a = this.current - 1 >= 0 ? this.current - 1 : this.playlist.length - 1;
            (this.loop && this.options.playlistOptions.loopOnPrevious || a < this.playlist.length - 1) && this.play(a)
        },
        shuffle: function(c, d) {
            var e = this;
            c === b && (c = !this.shuffled), (c || c !== this.shuffled) && a(this.cssSelector.playlist + " ul").slideUp(this.options.playlistOptions.shuffleTime, function() {
                e.shuffled = c, c ? e.playlist.sort(function() {
                    return .5 - Math.random()
                }) : e._originalPlaylist(), e._refresh(!0), d || !a(e.cssSelector.jPlayer).data("jPlayer").status.paused ? e.play(0) : e.select(0), a(this).slideDown(e.options.playlistOptions.shuffleTime)
            })
        },
        blur: function(b) {
            a(this.cssSelector.jPlayer).jPlayer("option", "autoBlur") && a(b).blur()
        }
    }
})(jQuery);