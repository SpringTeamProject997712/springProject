<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.music.mapper.MemberMapper">
	<resultMap type="com.music.domain.MemberVO" id="memberTableMap">
		<id property="id" column="id"/>
		<result property="id" column="id"/>
		<result property="pw" column="pw"/>
		<result property="nickname" column="nickname"/>
		<result property="name" column="name"/>
		<result property="active" column="active"/>
		<result property="phone" column="phone"/>
		<result property="email" column="email"/>
		<result property="zipnum" column="zipnum"/>
		<result property="image" column="image"/>
		<result property="address1" column="address1"/>
		<result property="address2" column="address2"/>
		<result property="regdate" column="regdate" javaType="java.util.Date"/>
		<collection property="authList" resultMap="authMap"/>
	</resultMap>
	<resultMap type="com.music.domain.Member_authVO" id="authMap">
		<result property="id" column="id"/>
		<result property="auth" column="auth"/>
	</resultMap>
	
	<sql id="search_box">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<if test="keyword != null">
				m.id like '%'||#{keyword}||'%'
			</if>
		</trim>
	</sql>
	
	<insert id="registMember">
		insert into member_m (id,pw,nickname,name,phone,email,address1,address2, zipnum,image)
		values (#{id},#{pw},'임시',#{name},'임시',#{id},'임시','임시', '임시', 'default_user.png')
	</insert>
	<insert id="registMemberAuth">
		insert into member_auth_m (id, auth)
		values (#{id},'ROLE_USER')
	</insert>
	
	<select id="viewMember" resultMap="memberTableMap">
		select m.id as id, pw, name, zipnum, nickname, active, phone, image, email, address1, address2, regdate, auth 
		from member_m m LEFT OUTER JOIN member_auth_m auth
		ON m.id = auth.id
		where m.id= #{id}
	</select>
	
	<select id="viewMemberList" resultMap="memberTableMap">
		select m.id as id, pw, name, zipnum, nickname, active, phone, active, email, address1, address2, regdate, auth 
		from member_m m LEFT OUTER JOIN member_auth_m auth
		ON m.id = auth.id
	</select>
	
	<select id="viewMemberListWithPaging" resultMap="memberTableMap">
		<![CDATA[
			select * from (
				select m.id as id, pw, name, zipnum, nickname, phone, active, email, address1,
						 address2, regdate, auth, rownum rn  
				from member_m m LEFT OUTER JOIN member_auth_m auth
				ON m.id = auth.id where 
		]]>
		<include refid="search_box"></include>
		<![CDATA[			
					rownum <= #{amount} * #{pageNum}  order by regdate desc
				) 
			where rn > #{amount} * (#{pageNum}-1)
		]]>
	</select>
	
	<select id="checkMemberWithId" resultType="int">
		select count(*) from member_m where id = #{id}
	</select>
	
	<select id="countMember" resultType="int">
			select count(*) from member_m m where
			<include refid="search_box"></include>
			(active = '0' or active = '1')
	</select>
	
	<select id="countOrder" resultType="int">
			select count(*) from order_m m where 
			<include refid="search_box"></include>
			rownum > 0
	</select>
	
	<update id="updateMember">
		update member_m set name=#{name}, address1=#{address1}, address2=#{address2}, 
		zipnum=#{zipnum}, active=#{active}, phone=#{phone} , image=#{image}
		where id=#{id}
	</update>
	
	<update id="updateMemberActive">
		update member_m set active='0' where id=#{id}
	</update>
	
	<delete id="deleteMember">
		delete from member_m where id = #{id}
	</delete>
	
	<delete id="deleteAuth">
		delete from member_auth_m where id = #{id}
	</delete>
	
	<insert id="insertAuth">
		insert into member_auth_m(id, auth) values(#{id},#{auth})
	</insert>
	<select id="favouritesView" resultType="com.music.domain.FavouriteVO">
	<![CDATA[	
	select rownum, tbno, tname, name, price, lbno, likes, id, pbno ,length
    from (select * from myfavourites order by lbno asc)
    where rownum > 0 and id=#{id}
	]]>
	</select>
	
	<select id="orderList" resultType="com.music.domain.OrderVO">
		<![CDATA[	
	select 
		rownum, o.orderid, m.name, o.amount, o.orderdate 
	from order_m o
           inner join member_m m
           on m.id = o.id 
		where rownum > 0 and o.id = #{id} order by o.orderdate desc 
		]]>
	</select>
	
	<select id="orderDetailList" resultType="com.music.domain.OrderListVO">
	select 
    o.orderid, d.odbno, o.id, o.amount, o.orderdate, 
    p.pbno, p.category, 
    t.price as tprice, t.name as tname, 
    a.price as aprice, a.name as aname, a.image_240 as aimage,
    t.image as timage
	from order_m o, orderdetail_m d, product_m p, view_track_m t, album_m a
	where o.orderid = d.orderid
		and p.pbno = d.pbno
		and p.pbno = t.pbno(+)
		and p.pbno = a.pbno(+)
		and o.id = #{id} and o.orderid = #{orderid}
	</select>
	
	<select id="orderdetailTracksInAlbum" resultType="com.music.domain.OrderListVO">
	select d.odbno, d.orderid, d.pbno, t.tbno, a.abno, a.image, 
    t.singer, t.duration, t.length, t.name,t.price 
	from orderdetail_m d, product_m p, view_track_m t, album_m a
	where d.pbno = p.pbno
	and p.pbno = a.pbno
	and a.abno = t.abno
	and d.orderid = #{orderid}
	</select>
	
	<select id="orderTrackList" resultType="com.music.domain.OrderListVO">
		select 
		   rownum, t.name as tname, a.name as aname, a.singer as singer, t.duration, t.songrealname, t.songname,
		    a.image_50 as image, t.tbno, d.pbno,
		    (LPAD ((TRUNC (duration / 60)), 2, '0')
		       ||  ':'
		       ||  LPAD ((MOD (duration, 60)), 2, '0')) as length
		from order_m o 
		    inner join orderdetail_m d 
		    on o.orderid = d.orderid 
		    inner join track_m t
		    on t.pbno = d.pbno 
		    inner join album_m a
		    on t.abno = a.abno 
		where o.id = #{id}
	</select>
	
	<select id="orderAlbumList" resultType="com.music.domain.OrderListVO">
		select 
	rownum, 
    o.orderid, 
    a.pbno, a.abno, a.singer, a.name as aname, a.image_50 as image, 
    t.tbno, t.name as tname, t.duration, t.songrealname, t.songname, t.duration, 
                 (LPAD ((TRUNC (duration / 60)), 2, '0') 
		       ||  ':' 
		       ||  LPAD ((MOD (duration, 60)), 2, '0')) as length  
		from order_m o 
		    inner join orderdetail_m d 
		    on o.orderid = d.orderid 
            inner join product_m p 
            on d.pbno = p.pbno 
		    inner join album_m a
		    on d.pbno = a.pbno 
            left outer join track_m t 
            on a.abno = t.abno 
		where o.id = #{id} order by a.abno asc
	</select>
	
	<select id="viewOrderListWithPaging" resultType="com.music.domain.OrderVO">
		<![CDATA[
		select *from(
			select 
				o.orderid, o.id, o.orderdate, o.amount as total,
				    m.name, rownum rn
				from order_m o
				inner join member_m m
				on o.id = m.id
				where
		]]>
		<include refid="search_box"></include>
		<![CDATA[			
					rownum <= #{amount} * #{pageNum} 	
				) 
			where rn > #{amount} * (#{pageNum}-1)
		]]>
	</select>
	
	<select id="countMemberByRegdate" resultType="com.music.domain.ChartVO">
		<![CDATA[	
		select * from 
		(select to_char(regdate,'yyyy-MM-dd') as x_value, count(*) as count from member_m
		group by to_char(regdate,'yyyy-MM-dd')
		order by x_value desc)
		where rownum < 6 order by x_value
		]]>
	</select>
	<select id="countMoneyByRegdate" resultType="com.music.domain.ChartVO">
		<![CDATA[	
		select * from
		(select to_char(orderdate,'yyyy-MM-dd') as x_value ,sum(amount) as count from order_m
		group by to_char(orderdate,'yyyy-MM-dd') order by x_value desc)
		where rownum < 6 order by x_value
		]]>
	</select>
	<select id="ratioOrder" resultType="com.music.domain.ChartVO">
		select category as x_value, ROund(RATIO_TO_REPORT(count) over(),3) * 1000 as count from (
    select p.category, count(*) as count from orderdetail_m od, product_m p
    where p.pbno = od.pbno
    group by p.category
		) order by category
	</select>
	<select id="ratioOrderByGenre" resultType="com.music.domain.ChartVO">
		select x_value, ROund(RATIO_TO_REPORT(count) over(),3) * 1000 as count from (
	    select g.genrenames as x_value ,count(*) as count from orderdetail_m od, product_m p, track_m t, genrelist g
	    where od.pbno = p.pbno
	    and p.pbno = t.pbno
	    and t.genre = g.genre
	    group by g.genrenames
		) order by x_value
	</select>
	<select id="countAllMember" resultType="int">
		select count(*) as count from member_m
	</select>
	<select id="countAllMoney" resultType="int">
		select sum(amount) as sum from order_m
	</select>
</mapper>